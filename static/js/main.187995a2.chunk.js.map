{"version":3,"sources":["components/imgCard/imgCard.js","components/navBar/NavBar.js","components/Jumbotron/Jumbotron.js","components/Footer/Footer.js","components/MainContainer/MainContainer.js","App.js","serviceWorker.js","index.js"],"names":["ImgCard","props","className","key","id","alt","name","src","image","onClick","handleImgClick","NavBar","message","score","top","Jumbotron","Footer","href","target","rel","shuffleArray","array","i","length","j","Math","floor","random","MainContainer","state","images","clicked","counter","topScore","clickedImages","push","setState","randomize","console","log","indexOf","this","map","description","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.187995a2.chunk.js","sourcesContent":["//==================================================\r\n// Import needed files\r\n//==================================================\r\n\r\nimport React from \"react\";\r\nimport \"./style.css\";\r\n\r\n//==================================================\r\n// Define component \"ImgCard\"\r\n//==================================================\r\n\r\nconst ImgCard = function(props) {\r\n    return (\r\n        \r\n        <div className=\"card-group\" key={props.id}>\r\n            <div className=\"img-container\">\r\n                <img\r\n                    className=\"img\"\r\n                    // Description if imag fails to load.\r\n                    alt={props.name}\r\n                    // Assign img url to img tag 'src' attribute.\r\n                    src={props.image}\r\n                    // pass the id through the click to push into array\r\n                    onClick={() => {props.handleImgClick(props.id)}}\r\n                />\r\n            </div>\r\n        </div>\r\n        \r\n    );\r\n}\r\n\r\nexport default ImgCard","//==================================================\r\n// Import needed files\r\n//==================================================\r\n\r\nimport React from \"react\";\r\nimport \"./style.css\";\r\n\r\n//==================================================\r\n// Define component \"NavBar\"\r\n//==================================================\r\n\r\nfunction NavBar(props) {\r\n    return (\r\n        <nav className=\"navbar sticky-top navbar-light bg-light\">\r\n\r\n            <div className=\"col\">\r\n            <h2 className=\"gameTitle float-left\" >Mini-fig Clicky Game!</h2>\r\n            </div>\r\n\r\n            <div className=\"col\">\r\n            <p className=\"messageDisplay text-center\">{props.message}</p>\r\n            </div>\r\n\r\n            <div className=\"col\">\r\n            <p className=\"scoreDisplay float-right\">Score: {props.score} / TopScore: {props.top} </p>\r\n            </div>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default NavBar;","//==================================================\r\n// Import needed files\r\n//==================================================\r\n\r\nimport React from \"react\";\r\nimport \"./style.css\";\r\n\r\n//==================================================\r\n// Define component \"Jumbotron\"\r\n//==================================================\r\n\r\nfunction Jumbotron() {\r\n    return (\r\n        <div className=\"jumbotron\">\r\n\r\n            <h1 className=\"text-center mb-4\">Mini-fig Clicky Game!</h1>\r\n            <h4 className=\"text-center\">Lets Play, click the images, but not the same one twice!</h4>\r\n                \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Jumbotron;","//==================================================\r\n// Import needed files\r\n//==================================================\r\n\r\nimport React from \"react\";\r\nimport \"./style.css\";\r\n\r\n//==================================================\r\n// Define component \"Footer\"\r\n//==================================================\r\n\r\nfunction Footer() {\r\n    return (\r\n        <div className=\"foot card-header mt-4 rounded gradient-border row\">\r\n\r\n            <div className=\"col-4 text-left\">\r\n                <a href=\"https://github.com/Bauter\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"btn btn-dark footer-link\">Bauter</a>\r\n            </div>\r\n\r\n            <div className=\"col-4\">\r\n                <h5 className=\"text-center p-5 \" id=\"footer-title\">\r\n                    Copyright &copy; 2020\r\n                </h5>\r\n            </div>\r\n      \r\n            <div className=\"col-4 text-right\">\r\n                <a href=\"https://bauter.github.io/Updated-portfolio/\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"btn btn-dark footer-link\">Portfolio</a>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Footer","//==================================================\r\n// Import needed files\r\n//==================================================\r\n\r\nimport React, { Component } from \"react\";\r\nimport ImgCard from \"../imgCard/imgCard\";\r\nimport NavBar from \"../navBar/NavBar\";\r\nimport Jumbotron from \"../Jumbotron/Jumbotron\";\r\nimport Footer from \"../Footer/Footer\";\r\nimport images from \"../../images.json\";\r\nimport \"./style.css\";\r\n\r\n//=========================================\r\n// Fisher-Yates (aka Knuth) Shuffle\r\n//=========================================\r\n\r\nfunction shuffleArray(array) {\r\n    for (let i = array.length - 1; i > 0; i--) {\r\n        const j = Math.floor(Math.random() * (i + 1));\r\n        [array[i], array[j]] = [array[j], array[i]];\r\n    }\r\n    // Return the shuffled array\r\n    return array\r\n}\r\n\r\n//===========================================\r\n// Create extended component \"MainContainer\"\r\n//===========================================\r\n\r\nclass MainContainer extends Component {\r\n\r\n    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    //  Define State\r\n    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\n    state = {\r\n        images,\r\n        clicked: [],\r\n        counter: 0,\r\n        topScore: 0,\r\n        message: \"Click an image to get started!\"\r\n        \r\n    }\r\n\r\n    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    // onClick event listener \"handleImgClick\"\r\n    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\n    handleImgClick = (id) => {\r\n        // Push the id of the image into the clicked array\r\n        let clickedImages = this.state.clicked;\r\n\r\n        //clickedImages.push(id)\r\n\r\n        // test shuffle by calling here..... WORKS!\r\n        //this.randomize();\r\n\r\n        if (clickedImages.length === 0) {\r\n            clickedImages.push(id);\r\n\r\n            this.setState(\r\n                { \r\n                clicked: clickedImages,\r\n                counter: this.state.counter + 1 ,\r\n                message: \"Correct!\"\r\n                }\r\n            );\r\n\r\n            // Call randomize... \r\n            this.randomize();\r\n            console.log(`length:${clickedImages.length}`);\r\n            console.log(`Array:${clickedImages}`);\r\n\r\n\r\n\r\n        } else if (clickedImages.length > 0) {\r\n\r\n            \r\n\r\n            // Determine clicked img ID is in the clickedUImages array\r\n            if (clickedImages.indexOf(id) === -1) {\r\n    \r\n                // Add 'this' id to the clicked array\r\n                clickedImages.push(id);\r\n    \r\n                // View the array after push\r\n                console.log(`Array:${clickedImages}`);\r\n                    \r\n                // log the id of image clicked\r\n                console.log(`This id: ${id}`);\r\n    \r\n                // Adjust state of clicked, Increment counter by one, & Display \"Correct Guess\" message.\r\n                this.setState(\r\n                    { \r\n                    clicked: clickedImages,\r\n                    counter: this.state.counter + 1 ,\r\n                    message: \"Correct!\"\r\n                    }\r\n                );\r\n    \r\n                // Call randomize... \r\n                this.randomize();\r\n                \r\n                // Set top score\r\n                if (this.state.counter >= this.state.topScore) {\r\n                    this.setState({ topScore: this.state.counter })\r\n                }\r\n                \r\n            } else {\r\n\r\n                // log the id of image clicked\r\n                console.log(`This id: ${id}`);\r\n                \r\n                // Set top score\r\n                if (this.state.counter > this.state.topScore) {\r\n                    this.setState({ topScore: this.state.counter })\r\n                }\r\n\r\n                // Set state of clicked again back to empty array, Reset counter score to zero, & Display \"Wrong guess!\" message.\r\n                    this.setState(\r\n                    {\r\n                        clicked: [],\r\n                        counter: 0,\r\n                        message: \"Incorrect! Play again?\" \r\n                    }\r\n                );\r\n    \r\n                // Call randomize... \r\n                this.randomize();\r\n            };\r\n\r\n        }\r\n\r\n    };\r\n        \r\n    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    //  Define function to call shuffle \r\n    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\n    randomize = () => {\r\n        this.setState({ images: shuffleArray(images) });\r\n    };\r\n\r\n    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    // Render to the page\r\n    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <NavBar \r\n                    message={this.state.message}\r\n                    score={this.state.counter}\r\n                    top={this.state.topScore}\r\n                />\r\n                <Jumbotron />\r\n\r\n                <div className=\"container\">\r\n\r\n                    <div className=\"card-columns\">\r\n                        {this.state.images.map(images => (\r\n                            <ImgCard\r\n                                image={images.image}\r\n                                name={images.description}\r\n                                id={images.id}\r\n                                handleImgClick={this.handleImgClick}\r\n                            />\r\n                        ))}\r\n                    </div>\r\n    \r\n                </div>\r\n\r\n                <Footer />\r\n\r\n            </div>\r\n        )\r\n    };\r\n\r\n}\r\n\r\nexport default MainContainer;","//==================================================\n// Import needed files\n//==================================================\n\nimport React from 'react';\nimport MainContainer from \"./components/MainContainer/MainContainer\"\nimport \"./App.css\"\n\n//==================================================\n// Define App()\n//==================================================\n\nfunction App() {\n  return (\n    <MainContainer />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}